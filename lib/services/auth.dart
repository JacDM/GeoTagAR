import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:geotagar/models/users.dart' as model;
import 'package:flutter/material.dart';

class AuthMethods {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  //
  Future<model.User> getUserDetails() async {
    User currentUser = _auth.currentUser!;
    DocumentSnapshot snap = await FirebaseFirestore.instance
        .collection('users')
        .doc(currentUser.uid)
        .get();
    return model.User.fromSnap(snap);
  }

  // Sign-up stuff
  Future signUp(
      {required String email,
      required String password,
      required String username,
      required String name,
      //required int age,
      String? gender,
      required String accountType}) async {
    String res = "Error signing up";
    try {
      UserCredential userCredential = await _auth
          .createUserWithEmailAndPassword(email: email, password: password);

      print(userCredential.user!.uid);

      // Add to database
      //_firestore.collection('users').doc(userCredential.user!.uid);

      model.User user = model.User(
        email: email,
        username: username,
        uid: userCredential.user!.uid,
        name: name,
        gender: gender!,
        accountType: accountType,
      );

      final docUser =
          _firestore.collection('users').doc(userCredential.user!.uid);

      // final data = {
      //   'email': email,
      //   'username': username,
      //   'uid': userCredential.user!.uid,
      //   'name': name,
      //   //'lastName': lastName,
      //   //'age': age,
      //   'gender': gender,
      //   'accountType': accountType,
      // };

      await docUser
          .set(user.toJson())
          .then((value) => print("$username added to FireStore."));

      res = "Signed up successfully";

      User? firebaseUser = userCredential.user;
      return firebaseUser;

      // Code below was auto-generated by github copilot

    } on FirebaseAuthException catch (e) {
      if (e.code == 'weak-password') {
        print('The password provided is too weak.');
      } else if (e.code == 'email-already-in-use') {
        print('The account already exists for that email.');
      }
    } catch (err) {
      res = err.toString();
      //print(err);
    }
    return res;
  }

  Future logIn({
    required String email,
    required String password,
  }) async {
    try {
      UserCredential userCredential = await _auth.signInWithEmailAndPassword(
          email: email, password: password);
      User? firebaseUser = userCredential.user;
      return firebaseUser;
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found') {
        print('No user found for that email.');
      } else if (e.code == 'wrong-password') {
        print('Wrong password provided for that user.');
      }
    }
  }

  Future signOut() async {
    try {
      return await _auth.signOut();
    } catch (err) {
      print(err.toString());
      return null;
    }
  }
}
