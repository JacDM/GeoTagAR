import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:geotagar/models/users.dart';
import 'package:flutter/material.dart';
import 'package:geotagar/screens/userLogIn_Register/log_in.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../core/constants/constants.dart';
import '../core/constants/firebase_constants.dart';
//import 'package:geotagar/utils/methods.dart';

final userProvider = StateProvider<UserModel?>((ref) => null);

class AuthServices {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  //final _user = FirebaseFirestore.instance.collection('users');
  CollectionReference get _users =>
      _firestore.collection(FirebaseConstants.usersCollection);

  //
  // Future<model.UserModel> getUserDetails() async {
  //   User currentUser = _auth.currentUser!;
  //   Map snap = await FirebaseFirestore.instance
  //       .collection('users')
  //       .doc(currentUser.uid)
  //       .get();
  //   return model.UserModel.fromMap(snap);
  // }

  // get user details
  Future<UserModel> getUserDetails() async {
    User currentUser = _auth.currentUser!;

    DocumentSnapshot documentSnapshot =
        await _firestore.collection('users').doc(currentUser.uid).get();

    return UserModel.fromSnap(documentSnapshot);
  }

  // Sign-up stuff
  Future<String> signUp(
      {required String email,
      required String password,
      required String username,
      required String name,
      //required int age,
      String? profilePic,
      Uint8List? file,
      String? gender,
      required String accountType}) async {
    String errorCheck = "Error signing up";
    try {
      if (email.isNotEmpty || password.isNotEmpty || username.isNotEmpty) {
        UserCredential userCredential = await _auth
            .createUserWithEmailAndPassword(email: email, password: password);

        print(userCredential.user?.uid);
        //await sendEmailVerification();
        // Add to database
        //_firestore.collection('users').doc(userCredential.user!.uid);

        UserModel userModel;

        // if (userCredential.additionalUserInfo!.isNewUser) {
        userModel = UserModel(
          email: email,
          username: username,
          uid: userCredential.user!.uid,
          profilePic: Constants.avatarDefault,
          banner: Constants.bannerDefault,
          followers: [],
          following: [],
          name: name,
          gender: gender!,
          accountType: accountType,
        );
        final docUser = _users.doc(userCredential.user!.uid);
        await docUser
            .set(userModel.toJson())
            .then((value) => print("$username added to FireStore."));
        // } else {
        //   userModel = await getUserStream(userCredential.user!.uid).first;
        // }
        // User? firebaseUser = userCredential.user;
        // }

        // final data = {
        //   'email': email,
        //   'username': username,
        //   'uid': userCredential.user!.uid,
        //   'name': name,
        //   //'lastName': lastName,
        //   //'age': age,
        //   'gender': gender,
        //   'accountType': accountType,
        // };

        errorCheck = "Signed up successfully";

        return errorCheck;

        // Code below was auto-generated by github copilot

      }
    } on FirebaseAuthException catch (e) {
      if (e.code == 'weak-password') {
        print('The password provided is too weak.');
      } else if (e.code == 'email-already-in-use') {
        print('The account already exists for that email.');
      }
    } catch (err) {
      errorCheck = err.toString();
      //print(err);
    }
    return errorCheck;
  }

  // Stream<UserModel> getUserStream(String uid) {
  //   return _users.doc(uid).snapshots().map(
  //       (event) => UserModel.fromMap(event.data() as Map<String, dynamic>));
  // }

  Future<void> sendEmailVerification() async {
    User? user = _auth.currentUser;
    user!.sendEmailVerification();
    //showSnackBar(context, "Verification Mail")
    // ScaffoldMessenger.of(context!).showSnackBar(
    //     const SnackBar(content: Text("A Verification Email has been sent")));
  }

  Future logIn({
    required String email,
    required String password,
  }) async {
    try {
      UserCredential userCredential = await _auth.signInWithEmailAndPassword(
          email: email, password: password);
      User? firebaseUser = userCredential.user;
      return firebaseUser;
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found') {
        print('No user found for that email.');
      } else if (e.code == 'wrong-password') {
        print('Wrong password provided for that user.');
      }
    }
  }

  // Future<void> signOut() async {
  //   try {
  //     //notifyListeners();
  //     //Phoenix.rebirth(context);
  //     return await _auth.signOut();
  //   } catch (err) {
  //     print(err.toString());
  //     //return err.toString();
  //   }
  // }

  Future signOut(context) async {
    await _auth.signOut().then((value) => Navigator.of(context)
        .pushAndRemoveUntil(MaterialPageRoute(builder: (context) => LogIn()),
            (route) => false));
  }

  // getUserDetails() {}
}
