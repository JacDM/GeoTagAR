import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:geotagar/models/users.dart';
import 'package:flutter/material.dart';
import 'package:geotagar/screens/userLogIn_Register/log_in.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../core/constants/constants.dart';
import '../core/constants/firebase_constants.dart';
//import 'package:geotagar/utils/methods.dart';

final userProvider = StateProvider<UserModel?>((ref) => null);

class AuthServices {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  //final _user = FirebaseFirestore.instance.collection('users');
  CollectionReference get _users =>
      _firestore.collection(FirebaseConstants.usersCollection);

  // get user details
  Future<UserModel> getUserDetails() async {
    User currentUser = _auth.currentUser!;

    DocumentSnapshot documentSnapshot =
        await _firestore.collection('users').doc(currentUser.uid).get();

    return UserModel.fromSnap(documentSnapshot);
  }

  // Sign-up stuff
  Future<String> signUp(
      {required String email,
      required String password,
      required String username,
      required String name,
      required int age,
      String? profilePic,
      Uint8List? file,
      String? gender,
      String? bio,
      required String accountType}) async {
    String errorCheck = "Error signing up";
    try {
      if (email.isNotEmpty || password.isNotEmpty || username.isNotEmpty) {
        UserCredential userCredential = await _auth
            .createUserWithEmailAndPassword(email: email, password: password);

        print(userCredential.user?.uid);

        UserModel userModel;

        userModel = UserModel(
          email: email,
          username: username,
          uid: userCredential.user!.uid,
          profilePic: Constants.avatarDefault,
          banner: Constants.bannerDefault,
          followers: [],
          following: [],
          name: name,
          age: age,
          gender: gender!,
          accountType: accountType,
          bio: '',
          blockedUsers: [],
          isAdmin: false,
        );
        final docUser = _users.doc(userCredential.user!.uid);
        await docUser
            .set(userModel.toJson())
            .then((value) => print("$username added to FireStore."));

        errorCheck = "Signed up successfully";

        return errorCheck;

        // Code below was auto-generated by github copilot
      }
    } on FirebaseAuthException catch (e) {
      if (e.code == 'weak-password') {
        print('The password provided is too weak.');
      } else if (e.code == 'email-already-in-use') {
        print('The account already exists for that email.');
      }
    } catch (err) {
      errorCheck = err.toString();
      //print(err);
    }
    return errorCheck;
  }

  Future<void> sendEmailVerification() async {
    User? user = _auth.currentUser;
    user!.sendEmailVerification();
    //showSnackBar(context, "Verification Mail")
    // ScaffoldMessenger.of(context!).showSnackBar(
    //     const SnackBar(content: Text("A Verification Email has been sent")));
  }

  Future<User?> logIn({
    required String email,
    required String password,
  }) async {
    try {
      UserCredential userCredential = await _auth.signInWithEmailAndPassword(
          email: email, password: password);
      User? firebaseUser = userCredential.user;
      return firebaseUser;
    } on FirebaseAuthException catch (e) {
      if (e.code == 'user-not-found') {
        print('No user found for that email.');
      } else if (e.code == 'wrong-password') {
        print('Wrong password provided for that user.');
        throw FirebaseAuthException(code: 'wrong-password', message: e.message);
      }
      return null;
    }
  }

  Future signOut(context) async {
    await _auth.signOut().then((value) => Navigator.of(context)
        .pushAndRemoveUntil(
            MaterialPageRoute(builder: (context) => const LogIn()),
            (route) => false));
  }
}
